# Recipe for version 5.9.6 by Lucas C. Villa Real <lucasvr@gobolinux.org>, on Mon 09 Nov 2020 05:22:17 PM -03
compile_version=1.8.5
url="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.9.6.tar.xz"
file_size=115547768
file_md5=ceff39042d2c9d246e21d293daeeb591
recipe_type=makefile
build_target="all"
install_target="modules_install"

make_variables=(
    LD=ld.bfd
)

install_variables=(
   INSTALL_FW_PATH="$target/lib/firmware"
)

unmanaged_files=(
   $goboBoot/
)

do_configuration() {
   if [ ! -f .config ]
   then
      if [ ! -f $goboStatus/config.gz ]
      then
         cp "$archsubdir"/dot-config .config
      else
         if Ask "Do you want to use a configuration based on the one from the running kernel?"
         then
            zcat $goboStatus/config.gz > .config
            yes "" | make LD=ld.bfd oldconfig
         else
            Log_Normal "Using the kernel configuration shipped with the recipe"
            cp "$archsubdir"/dot-config .config
         fi
      fi
   fi

   # Sanity check to make sure patches are not trying to mess with the version id.
   local v=`grep "^VERSION =" Makefile | awk '{print $3}'`
   local p=`grep "^PATCHLEVEL" Makefile | awk '{print $3}'`
   local s=`grep "^SUBLEVEL" Makefile | awk '{print $3}'`
   local e=`grep "^EXTRAVERSION" Makefile | awk '{print $3}'`
   local reported="$v.$p.$s$e"
   if [ "$reported" != "$version" ]
   then Die "Reported version ($reported) does not match version ($version). Please fix recipe."
   fi

   make LD=ld.bfd menuconfig || Die "'menuconfig' failed."
   [ -z "${SUDO_USER}" ] || chown ${SUDO_USER} .config

   # Build tools/objtool. Third-party modules may rely on it.
   if [ ! -e tools/objtool/objtool ]
   then make LD=ld.bfd -C tools/objtool
   fi
}

do_install() {
   $sudo_exec mkdir -p "$target"/lib/firmware
   makefile_do_install "$@"
}

pre_link() {
   local simpleversion=`private__calculate_version`
   local fullversion=`private__calculate_full_version`

   # Copy arch-dependent results to the destination
   private__copy_kernel_image
   
   # Copy sanitized sources to $target/lib/build
   private__copy_kernel_source $simpleversion
   Log_Normal "Calculating kernel module dependencies..."
   depmod -b $target ${version}-Gobo
   # Create System.map and kernel symlinks
   private__link_at_system_kernel_boot $simpleversion $fullversion
}

private__calculate_version() {
   if grep -q "^CONFIG_LOCALVERSION=" .config
   then suffix=`grep "^CONFIG_LOCALVERSION=" .config | cut -d= -f2 | tr -d '"' | sed 's/-[0-9]*-//'`
   fi
   echo "$version$suffix"
}

private__calculate_full_version() {
   local simpleversion=`private__calculate_version`
   local newsuffix=""
   local count=`ls $goboBoot/kernel-$version-* 2> /dev/null | sort -n | wc -l | awk '{print $1}'`
   if [ "$count" -gt "0" ]
   then
      let count=$count+1
      newsuffix="-$count"
   fi
   echo "$simpleversion$newsuffix"
}

private__copy_kernel_source() {
   local simpleversion="$1"
   local moddir="${target}/lib/modules/${simpleversion}"
   mkdir -p "$moddir"
   rm -f "${moddir}/build"
   rm -f "${moddir}/source"
   # Copy modules.order and modules.builtin
   cp $dir/modules.order $dir/modules.builtin $moddir/
   # Copy sanitized sources to Resources/Unmanaged/Files/Compile/Sources/linux-<version>
   local dest="${target}/lib/modules/${simpleversion}/build"
   mkdir -p $dest
   ln -fs build "${target}/lib/modules/${simpleversion}/source"

   Log_Normal "Creating a working copy of the kernel sources tree..."
   Quiet pushd $dir
   mkdir -p $dest/tools
   mkdir -p $dest/arch/x86/boot
   cp -r tools/{objtool,build,lib} $dest/tools/
   cp -r arch/x86/{lib,tools,purgatory} $dest/arch/x86/
   cp arch/x86/boot/string.c $dest/arch/x86/boot/
   cp .version .config System.map Module.symvers Makefile Kbuild Kconfig $dest/
   ls | while read i
   do
      if [ -d "$i" -a "$i" = "scripts" ]
      then
         cp -an "$i" $dest/
      elif [ -d "$i" ]
      then
         dirlist=`find "$i" -type d`
         filelist=`find "$i" \( \
            -name "*.h" -or \
            -name "*.bc" -or \
            -name "*.sh" -or \
            -name "*.mak" -or \
            -name "*.tbl" -or \
            -name "*.conf" -or \
            -name "*.include" -or \
            -name "Makefile*" -or \
            -name "Kconfig*" -or \
            -name "Kbuild*" -or \
            -name "asm-offsets.c" -or \
            -name "asm-offsets_32.c" -or \
            -name "asm-offsets_64.c" -or \
            -name "bounds.c" \
         \)`
         for dir in $dirlist
         do mkdir -p "$dest/$dir"
         done
         for file in $filelist
         do cp -n "$file" "$dest/$file"
         done
         for dir in $dirlist
         do find "$dest/$dir" -type d 2> /dev/null | sort -r | xargs rmdir 2> /dev/null
         done
      fi
   done
   Quiet popd
   
   #Quiet pushd $dest
   #make LD=ld.bfd prepare
   #Quiet popd
}

private__link_at_system_kernel_boot() {
   local simpleversion="$1"
   local fullversion="$2"
   mkdir -p $target/lib/modules
   
   dest=$target/Resources/Unmanaged/$goboBoot
   ln -fs kernel-$fullversion $dest/kernel
   ln -fs System.map-$fullversion $dest/System.map
}
